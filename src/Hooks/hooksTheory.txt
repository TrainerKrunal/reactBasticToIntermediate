# React Hooks Theory

React Hooks are special functions introduced in React 16.8 that let you use state and other React features in functional components, without writing a class. Hooks make it easier to share logic across components and organize code by feature, not lifecycle methods.

## Commonly Used Hooks

### 1. useState
- Allows you to add state to functional components.
- Returns a state variable and a function to update it.
- Example: `const [count, setCount] = useState(0);`

### 2. useEffect
- Lets you perform side effects in function components (e.g., data fetching, subscriptions, manual DOM updates).
- Runs after every render by default, but you can control when it runs using a dependency array.
- Example: `useEffect(() => { /* side effect */ }, [dependencies]);`

### 3. useContext
- Provides a way to share values (like themes or user data) between components without passing props through every level.
- Used with React's Context API.
- Example: `const value = useContext(MyContext);`

### 4. useMemo
- Memoizes the result of a calculation, recomputing only when dependencies change.
- Useful for optimizing performance of expensive computations.
- Example: `const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);`

### 5. useCallback
- Returns a memoized version of a callback function that only changes if dependencies change.
- Useful for passing stable callbacks to optimized child components.
- Example: `const memoizedCallback = useCallback(() => { doSomething(a, b); }, [a, b]);`

### 6. Custom Hooks
- You can create your own hooks to reuse stateful logic across components.
- A custom hook is a function whose name starts with `use` and that may call other hooks.
- Example: `function useFetch(url) { /* ... */ }`

## Rules of Hooks
- Only call hooks at the top level of your React function (not inside loops, conditions, or nested functions).
- Only call hooks from React function components or custom hooks.

Hooks simplify component logic, encourage code reuse, and make it easier to reason about state and side effects in React applications.
